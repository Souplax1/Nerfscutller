{"version":3,"file":"bundle.umd.js","sources":["index.ts"],"sourcesContent":["/**\r\n * @module @promises/timer\r\n * @copyright Â© 2017 Yisrael Eliav <yisraelx@gmail.com> (https://github.com/yisraelx)\r\n * @license MIT\r\n */\r\n\r\n/**\r\n * @function\r\n * @param ms The number of milliseconds that if no resolve then reject with `error`\r\n * @param message The error message for the rejection\r\n * @example\r\n *\r\n *  let promise: Promise<string> = Promise.resolve<string>('foo').delay(3000);\r\n *\r\n *  timer(promise, 1500, 'error: timeout').catch((error: string) => {\r\n *      console.log(error); // error => 'error: timeout'\r\n *  });\r\n */\r\nfunction timer<T>(promise: Promise<T>, ms?: number, message?: any): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n        let isExecute = false;\r\n        setTimeout(() => {\r\n            if (isExecute === false) reject(message);\r\n            isExecute = true;\r\n        }, ms);\r\n        Promise.resolve(promise).then((x: any) => {\r\n            if (isExecute === false) resolve(x);\r\n            isExecute = true;\r\n\r\n        }, reject);\r\n    });\r\n}\r\n\r\nexport default timer;\r\n"],"names":[],"mappings":";;;;;;;;;;;IAkBA,eAAkB,OAAmB,EAAE,EAAW,EAAE,OAAa;QAC7D,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,IAAI,SAAS,GAAG,KAAK,CAAC;YACtB,UAAU,CAAC;gBACP,IAAI,SAAS,KAAK,KAAK;oBAAE,MAAM,CAAC,OAAO,CAAC,CAAC;gBACzC,SAAS,GAAG,IAAI,CAAC;aACpB,EAAE,EAAE,CAAC,CAAC;YACP,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,CAAM;gBACjC,IAAI,SAAS,KAAK,KAAK;oBAAE,OAAO,CAAC,CAAC,CAAC,CAAC;gBACpC,SAAS,GAAG,IAAI,CAAC;aAEpB,EAAE,MAAM,CAAC,CAAC;SACd,CAAC,CAAC;IACP,CAAC;;;;;;;;;;;;;;;;"}