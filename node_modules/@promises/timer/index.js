"use strict";
/**
 * @module @promises/timer
 * @copyright Â© 2017 Yisrael Eliav <yisraelx@gmail.com> (https://github.com/yisraelx)
 * @license MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @function
 * @param ms The number of milliseconds that if no resolve then reject with `error`
 * @param message The error message for the rejection
 * @example
 *
 *  let promise: Promise<string> = Promise.resolve<string>('foo').delay(3000);
 *
 *  timer(promise, 1500, 'error: timeout').catch((error: string) => {
 *      console.log(error); // error => 'error: timeout'
 *  });
 */
function timer(promise, ms, message) {
    return new Promise(function (resolve, reject) {
        var isExecute = false;
        setTimeout(function () {
            if (isExecute === false)
                reject(message);
            isExecute = true;
        }, ms);
        Promise.resolve(promise).then(function (x) {
            if (isExecute === false)
                resolve(x);
            isExecute = true;
        }, reject);
    });
}
exports.default = timer;
//# sourceMappingURL=index.js.map