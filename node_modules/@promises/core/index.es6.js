/**
* @module @promises/core
* @copyright Â© 2017 Yisrael Eliav <yisraelx@gmail.com> (https://github.com/yisraelx)
* @license MIT
*/
let basePromise = typeof Promise !== 'undefined' ? Promise : ES6Promise;
if (typeof basePromise === 'undefined') {
    throw new Error(`Missing Promise support, the requirements are a global "Promise" (native or polyfill).`);
}
class Promises extends basePromise {
}
try {
    (exports).Promises = (Promises = Function(`Promise`, `return class Promises extends Promise{};`)(basePromise));
}
catch (e) {
}
(function (Promises) {
    function _setOnConstructor(key, fn, wrap = true) {
        this[key] = this[key] || wrap ? function () {
            let result = fn.apply(this, arguments);
            return this.resolve(result);
        } : fn;
    }
    Promises._setOnConstructor = _setOnConstructor;
    function _setOnPrototype(key, fn, wrap = true) {
        this.prototype[key] = this.prototype[key] || wrap ? function () {
            let { length } = arguments;
            let args = Array(length + 1);
            args[0] = this;
            for (let i = 1; i <= length; i++) {
                args[i] = arguments[i - 1];
            }
            let result = fn.apply(this, args);
            return this.constructor.resolve(result);
        } : fn;
    }
    Promises._setOnPrototype = _setOnPrototype;
})(Promises || (Promises = {}));
var Promises$1 = Promises;

export default Promises$1;
export { Promises };
//# sourceMappingURL=index.es6.js.map
