/**
* @module @promises/core
* @copyright Â© 2017 Yisrael Eliav <yisraelx@gmail.com> (https://github.com/yisraelx)
* @license MIT
*/
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var basePromise = typeof Promise !== 'undefined' ? Promise : ES6Promise;
if (typeof basePromise === 'undefined') {
    throw new Error("Missing Promise support, the requirements are a global \"Promise\" (native or polyfill).");
}
var Promises =               (function (_super) {
    __extends(Promises, _super);
    function Promises() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Promises;
}(basePromise));
try {
    (exports).Promises = (Promises = Function("Promise", "return class Promises extends Promise{};")(basePromise));
}
catch (e) {
}
(function (Promises) {
    function _setOnConstructor(key, fn, wrap) {
        if (wrap === void 0) { wrap = true; }
        this[key] = this[key] || wrap ? function () {
            var result = fn.apply(this, arguments);
            return this.resolve(result);
        } : fn;
    }
    Promises._setOnConstructor = _setOnConstructor;
    function _setOnPrototype(key, fn, wrap) {
        if (wrap === void 0) { wrap = true; }
        this.prototype[key] = this.prototype[key] || wrap ? function () {
            var length = arguments.length;
            var args = Array(length + 1);
            args[0] = this;
            for (var i = 1; i <= length; i++) {
                args[i] = arguments[i - 1];
            }
            var result = fn.apply(this, args);
            return this.constructor.resolve(result);
        } : fn;
    }
    Promises._setOnPrototype = _setOnPrototype;
})(Promises || (Promises = {}));
var Promises$1 = Promises;

export default Promises$1;
export { Promises };
//# sourceMappingURL=index.esm.js.map
