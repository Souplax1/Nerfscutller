"use strict";
/**
 * @module @promises/core
 * @copyright Â© 2017 Yisrael Eliav <yisraelx@gmail.com> (https://github.com/yisraelx)
 * @license MIT
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var basePromise = typeof Promise !== 'undefined' ? Promise : ES6Promise;
if (typeof basePromise === 'undefined') {
    throw new Error("Missing Promise support, the requirements are a global \"Promise\" (native or polyfill).");
}
var Promises = /** @class */ (function (_super) {
    __extends(Promises, _super);
    function Promises() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Promises;
}(basePromise));
exports.Promises = Promises;
try {
    (exports).Promises = (Promises = Function("Promise", "return class Promises extends Promise{};")(basePromise));
}
catch (e) {
}
(function (Promises) {
    function _setOnConstructor(key, fn, wrap) {
        if (wrap === void 0) { wrap = true; }
        this[key] = this[key] || wrap ? function () {
            var result = fn.apply(this, arguments);
            return this.resolve(result);
        } : fn;
    }
    Promises._setOnConstructor = _setOnConstructor;
    function _setOnPrototype(key, fn, wrap) {
        if (wrap === void 0) { wrap = true; }
        this.prototype[key] = this.prototype[key] || wrap ? function () {
            var length = arguments.length;
            var args = Array(length + 1);
            args[0] = this;
            for (var i = 1; i <= length; i++) {
                args[i] = arguments[i - 1];
            }
            var result = fn.apply(this, args);
            return this.constructor.resolve(result);
        } : fn;
    }
    Promises._setOnPrototype = _setOnPrototype;
})(Promises = exports.Promises || (exports.Promises = {}));
exports.Promises = Promises;
exports.default = Promises;
//# sourceMappingURL=index.js.map